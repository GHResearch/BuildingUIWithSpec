{ "title" : "The three pillars of Spec"}
@cha_pillars_of_spec

All user interfaces in ''Spec'' are constructed through the composition of existing user interfaces.
To define a user interface, it is sufficient to define the model of the user interface.

The UI elements that correspond to this model are instantiated by ''Spec'', depending on the underlying UI framework.
It is the composition of this model and these UI elements that makes up the resulting widget that is shown to the user, i.e. the resulting user interface.

Hence, since all UIs are constructed through ""composition"" of other UI's, and it is sufficient to define the ""model"" to define the UI, the root class of all UIs is named ==ComposableModel==.
So, to define a new user interface, a subclass of ==ComposableModel== needs to be created.

Spec is inspired by the MVP pattern.
It is built around three axes that materialize themselves as the following three methods in ==ComposableModel==:
- ==initializeWidgets==
- ==initializePresenter==
- ==defaultSpec==

These methods are hence typically found in the model for each user interface.
In this section we describe the responsibility for each method, i.e. how these three work together to build the overall UI.

!! the ''initializeWidgets'' method
@sec_initializeWidgets

This method is used to instantiate the models for the different widgets that will be part of the UI and store them in their respective instance variables.
Instantiation of the models will in turn result in the instantiation and initialization of the different widgets that make up the UI.
Consequently, configuration and default values of each widget are specified here as well, which is why this method is called ""initializeWidgets"".
This focus in this method is to specify what the widgets will look like and what their self-contained behavior is.
The behavior to update model state, e.g. when pressing a ==Save== button, is described in this method as well.
It is explicitly ""not"" the responsibility of this method to define the interactions ""between"" the widgets.

In general the ==initializeWidgets== method should follow the pattern:

- widgets instantiation
- widgets configuration specification
- specification of order of focus

The last step is not mandatory but ""highly"" recommended.
Indeed, without this final step keyboard navigation will not work at all.

The code in figure *@pattern* shows an example of an ==initializeWidgets== method.
It first instantiates a button and a list widget, storing each in an instance variable.
It second configures the button it by setting its label.
Third it specifies the focus order of all the widgets: first the button and then the list.

[[[label=pattern|caption=Example of initializeWidgets|
initializeWidgets

	theButton := self newButton.
	theList := self newList.

	theButton label: 'I am a button'.
	
	self focusOrder
		add: theButton;
		add: theList.
]]]

[[[caption:Hint|
Specifying this method is mandatory, as without it the UI would have no widgets.
]]]

!!! Widget instantiation

The instantiation of the model for a widget (and hence the widget) can be done in two ways: through the use of an creation method or through the use of the ==instantiate:== method.
Considering the first option, the framework provides unary messages for the creation of all basic widgets.
The format of these messages is ==new[Widget]==, for example ==newButton== creates a button widget, and ==newList== creates a list widget, as we have seen above.
The complete list of available widget creation methods can be found in the class ''ComposableModel'' in the protocol ''widgets''.
Considering the second option, to reuse any composite widgets, i.e. a subclass of ''ComposableModel'', the widget needs to be initialized using the ==instantiate:== method.
For example, to reuse a ''MessageBrowser''  widget, the code is == self instantiate: MessageBrowser.==

!! The ''layout'' method
@sec_layoutmethod

This method specifies the layout of the different widgets in the UI.
It also specifies how a widget reacts when the window is resized.

For the same UI multiple layouts can be described, and when the UI is built a specific layout to use can be specified.
If no such specific layout is given, the following lookup mechanism will be used to obtain the layout method:
# Search on class side, throughout the whole class hierarchy, for a method with the pragma ==<spec: #default>==.
# If multiple such methods exist, the first one found is used.
# If none such methods exist and if there is exactly one method with the pragma ==<spec>==, this method is used.
# Otherwise the class-side ==defaultSpec== method will be called, which will raise ==subclassResponsibility== if it is not overriden.

This method is on class side because it returns a value that usually is the same for all the instances.
Put differently, usually all the instances of the same user interface have the same layout and hence this can be considered as being a class-side accessor for a class variable.

The simpliest example of such a method is laying out just one widget.
Example *@ex_layout1* presents such a layout.
It returns a layout in which just one widget is added: the widget contained in ==theList== instance variable.

[[[label=ex_layout1|caption=Layout with only one widget|language=Smalltalk 
^ SpecLayout composed
	add: #theList;
	yourself
]]]

+Render of only one widget>file://figures/OnlyOneWidget.png|width=50|label=fig_OnlyOneWidget+

The symbol ==theList== refers to an instance side method returning a widget.
This is because instance variables are private, so the layout class needs to use an accessor to obtain it when building the UI.
Note that by default, a widget will take all the space available in its container.

This method is ''not'' restricted to laying out sub widgets.
It can also refer to sub widgets contained in sub widgets, i.e. when
reusing an existing UI, specify a new layout for the sub widgets that
comprise this UI.
To do this, instead of giving a symbol, an array with 2 symbols must
be given.
The first symbol identifies the UI being reused and the second the sub
widget within this UI whose new layout position is being specified.
We have seen an example of this reuse in *@sec_protocolbrowser*.

As said above, multiple layouts can be described for the same user interface.
In order to retrieve the correct method to apply, these methods need to be flagged with a pragma.
The pragma can be either ==<spec: default>== for the layout to use by default, or ==<spec>== for the other layouts.

Specifying this method is mandatory, as without it the UI would show no widgets to the user.

!!! Specify Layout

@@todo may give more informations about modal


As seen in section *@sec_buttonModel*, ==ComposableModel== provides methods to specify the layout to use at the openning, like ==openWithSpec:==. But notice it does not let the possibility to choose the layout of subwidgets.

In that aim, all the methods seen in the previous examples come with a variant used to specify which selector to use for the layout method. By example, for the ==add:== method the variant is  ==add:withSpec:==.

In the following example, ==SubWidgetButtons== manages two ButtonModel and provides two layout to display them.

[[[label=ex_SubWidgetButtons|caption=SubWidgetButtons|language=Smalltalk 
SubWidgetButtons>>initializeWidgets
	button1 := self instantiate: ButtonModel.
	button2 := self instantiate: ButtonModel.
	button1 label: '1'.
	button2 label: '2'.
	self focusOrder
		add: button1;
		add: button2

SubWidgetButtons>>defaultSpec
	<spec: #default>
	^ SpecLayout composed
		newColumn: [ :column | 
			column
				add: #button1 origin: 0 @ 0 corner: 1 @ 0.5;
				add: #button2 origin: 0 @ 0.5 corner: 1 @ 1 ];
		yourself

SubWidgetButtons>>onALine
	<spec>
	^ SpecLayout composed
		newRow: [ :row | 
			row
				add: #button1 origin: 0 @ 0 corner: 0.5 @ 1;
				add: #button2 origin: 0.5 @ 0 corner: 1 @ 1 ];
		yourself
]]]

==SubWidgetList== is very simple, and manages a ListModel.

[[[label=ex_SubWidgetList|caption=SubWidgetList|language=Smalltalk 
SubWidgetList>>initializeWidgets
	list := self instantiate: ListModel.
	list items: (1 to: 10).
	self focusOrder add: list
]]]


==SuperWidget== reuses them and provides two layout. One using the default layout of ==SubWidgetButtons== as result the figure *@fig_SuperWidget*.

 
[[[label=ex_SuperWidget|caption=SuperWidget|language=Smalltalk 
SuperWidget>>initializeWidgets
	subButtons := self instantiate: SubWidgetButtons.
	subList := self instantiate: SubWidgetList.
	self focusOrder
		add: subButtons;
		add: subList

SuperWidget>>defaultSpec
	<spec: #default>
	^ SpecLayout composed
		newRow: [ :row | 
			row
				newColumn: #subButtons;
				newColumn: #subList ];
		yourself

SuperWidget>>alternativeButton
	<spec>
	^ SpecLayout composed
		newRow: [ :row | 
			row
				newColumn: [ :column | column add: #subButtons withSpec: #onALine ];
				newColumn: #subList ];
		yourself
]]]

+Render of SuperWidget using defaultSpec>file://figures/SuperWidget.png|width=50|label=fig_SuperWidget+

The second using ==add:withSpec:== to use the other layout of ==SubWidgetButtons== as result the figure *@fig_alternativeButton*.

+Render of SuperWidget using alternativeButton>file://figures/alternativeButton.png|width=50|label=fig_alternativeButton+

+Diagram of hierarchy of parents of SuperWidget>file://figures/hierarchy.png|width=50|label=fig_superwidget_hierarchy+


!! The ''initializePresenter'' method
@sec_initializePresenter

This method takes care of the interactions between the different widgets.
By linking the behavior of the different widgets it specifies the overall presentation, i.e. how the overall UI responds to interactions by the user.

Usually this method consists of specifications of actions to perform when a certain event is received by a widget.
From the propagation of those events the whole interaction flow of the UI emerges.

In  ""Spec"", the different UI models are contained in value holders, and the event mechanism relies on the announcements of these value holders to manage the interactions between widgets.
Value holders provide a single method ==whenChangedDo:== that is used to register a block to perform on change.

In addition to this primitive  ==whenChangedDo:== method, the basic widgets provide more specific hooks, e.g. when an item in a list is selected or deselected.

The example *@ex_button* shows how to use one of the registration methods of the list widget to change the label of the button according to the selection in the list.

[[[label=ex_button|caption=How to change a button label according to a list selection|language=Smalltalk 
theList whenSelectedItemChanged: [ :item | 
	item 
		ifNil: [ theButton text: 'No selected item' ]
		ifNotNil: [ theButton text: 'An item is selected'] ]
]]]

If a programmer wants his or her widgets to be reused,
they should provide a comprehensive API.

This method is optional. Without it, the different widgets in the UI will simply not respond to changes in each others' state.

