{ "title" : "Dynamic Spec"}
@cha_dynamic_spec

@@todo JF REWRITE

!! ProtocolBrowser dynamic Version

Having an user interface with a well known number of sub widgets and a static layout is not always sufficient. 
A user interface is often more than just that, for example here are two situations where more is needed: 
First, when the layout of the user interface needs to be changed at runtime to match the execution context of the software.
Second, sub widgets are added or removed at runtime and therefore the programmer needs to be able to parametrize those new sub widgets on the fly.

''Spec'' also provides support for such dynamic user interfaces.
In this section we show how to use ''Spec'' in these situations.

First, we talk about making dynamic modifications of the layout of widgets, and second we discuss the dynamic adding and removing of subwidgets.
Third and last we show how the dynamic features can be used to quickly prototype a user interface.



!!! Dynamic modification of the layout

Changing the layout of widgets at runtime is straightforward, as we will see here.

Such changes basically consist of three steps:
- First, create the new layout.
- Second, the ==needRebuild== flag is set to ==false== to prohibit the creation of a new UI element (and reuse the existing one).
- Third, the rebuilding of the user interface is performed.

One widget can also keep the UI elements of its sub widgets which do not need to be rebuilt.
The message ==needRebuild: false== needs to be sent to any of those sub widgets.

For example, if a model comprising a ''button'' and a ''list'' just wants to rearrange the position of these UI elements, there is no need to rebuild them. As shown in the example *@ex_needRebuild*

[[[label=ex_needRebuild|caption=How to need rebuild sub widgets|language=Smalltalk 
rebuildWithNewLayout
	| newLayout |

	newLayout := self newLayoutCreatedDynamically.
	self needRebuild: false.
	theButton needRebuild: false.
	theList needRebuild: false.
	self buildWithSpecLayout: newLayout.
]]]



!!! Dynamic adding and removal of subwidgets

If a user interface needs a varying number of subwidgets, the amount of which cannot be established at compilation time, then another approach is needed.
In this scenario, ==DynamicComposableModel== is the model that needs to be subclassed, as this class provides support for the required kind of dynamic behavior.

Amongst others, this class adds the method ==assign:to:==, which takes a model instance as a first argument, and a unique symbol as a second argument.
This method is used to assign an already instantiated model as sub widget, instead of the method ==instantiateModels:== that takes a class name as argument and instantiates a new model.

When using ==DynamicComposableModel==, the instantiation of the sub widgets is a bit different from normal use.
In the ==instantiateWidgets== method, instead of instantiating each widget separately, ==instantiateModels:== should be used to instantiate them.
This method takes as argument an array of pairs, where each pair is composed of the unique name of the widget as key, and the name of the widget class as value.
This allows for a widget to be accessed by sending a message whose selector is the widget name to the model.

By example, if a widget named ==button== is created, then this widget can be accessed by calling ==self button== as shown in the example *@ex_dynamic_creation*.

[[[label=ex_dynamic_creation|caption=Dynamic creation of a widget|language=Smalltalk 
	self instantiateModels: #( button ButtonModel ).
	self button label: 'Click me'.
]]]

!!! Examples: Prototyping a UI

Thanks to the capability of ''Spec'' to dynamically instantiate widgets, it is also possible to prototype a user interface from within any workspace.
The following examples show how ''Spec'' can be used to quickly prototype a user interace.

The first example explains how to design by prototyping a user interface.
The second example introduces the composition of dynamic models.


The result can be seen in Figure *@fig_popup*.


!!!! Composing dynamic models

This exemple shows in three parts how to buid a simple code browser.

First a simple list widget is created displaying all the subclasses of AstractWidgetModel.

Then the list widget is reused to build a viewer widget displaying the protocol methods of the selected class.

Finally the last widget is defined with the previously created viewer.
In addition, a text zone is added to show the selected methods source code.

The final result looks like the Figure *@fig_browser*.

[[[
| dynamicWidgetClassList dynamicProtocolViewer dynamicProtoclBrowser |
	dynamicWidgetClassList := DynamicComposableModel new.
	dynamicWidgetClassList instantiateModels: #(#list #ListModel).
	dynamicWidgetClassList list items: (AbstractWidgetModel allSubclasses sorted: [ :a :b | a name < b name ]).
	dynamicWidgetClassList
		layout:
			(SpecLayout composed
				add: #list;
				yourself).
	dynamicWidgetClassList openWithSpec.
	dynamicProtocolViewer := DynamicComposableModel new.
	dynamicProtocolViewer assign: dynamicWidgetClassList to: #classes.
	dynamicProtocolViewer instantiateModels: #(#methods #ListModel).
	dynamicWidgetClassList list
		whenSelectedItemChanged: [ :item | 
			item
				ifNil: [ dynamicProtocolViewer methods items: #() ]
				ifNotNil: [ dynamicProtocolViewer methods items: (item selectorsInProtocol: 'api') sorted ] ].
	dynamicProtocolViewer
		layout:
			(SpecLayout composed
				newRow: [ :r | 
					r
						add: #classes;
						add: #methods ];
				yourself).
	dynamicProtocolViewer openWithSpec.
	dynamicProtoclBrowser := DynamicComposableModel new.
	dynamicProtoclBrowser assign: dynamicProtocolViewer to: #top.
	dynamicProtoclBrowser instantiateModels: #(#text #TextModel).
	dynamicProtocolViewer methods
		whenSelectedItemChanged: [ :selector | 
			selector
				ifNil: [ dynamicProtoclBrowser text text: '' ]
				ifNotNil: [ dynamicProtoclBrowser text text: (dynamicWidgetClassList list selectedItem >> selector) sourceCode ] ].
	dynamicProtoclBrowser
		layout:
			(SpecLayout composed
				newColumn: [ :c | 
					c
						add: #top;
						add: #text ];
				yourself).
	dynamicProtoclBrowser openWithSpec.
	dynamicProtoclBrowser title: 'Protocol browser'
]]]

+Prototype of Protocol Browser>file://figures/Dyn_Protocol_Browser.png|width=50|label=fig_browser+

