{ "title" : "First Contact With Examples"}
@cha_first_contact

This chapter presents Spec over a list of examples that highlight some characteristics of Spec. 
It will guide you through examples of increasing complexity. 

!! ListModel
@sec_listModel

We start with some example of lists: list with background colored item and icons. 

!!! Registered Colors in background

Here is an example of a ==ListModel== with elements having different colors. 
We want to that each element (displaying the name of the messsage to create a color) has such color as background as shown in Figure *@fig_modified_background*. 
The following code shows how to build a list widget using a ==ListModel== containing all registered color names.

[[[label=ex_registered_colors_list|caption=Code to create the List of registered colors|language=Smalltalk
	| registeredColorsList |
	registeredColorsList := ListModel new.
	registeredColorsList
		items: Color registeredColorNames;
		backgroundColorBlock: [ :item | Color named: item ];
		title: 'Registered colors'.
	registeredColorsList openWithSpec
]]]

+Render of the ListModel with modified background colors>file://figures/RegisteredColors.png|width=50|label=fig_modified_background+

Here we see the following messages that are part of the ==ListModel== API. 

- Message ==items:== sets the elements of the list. 
- Message ==backgroundColorBlock:== specifies a block that is executed to determine the background color of the current element.  It takes a block with a single parameter that is the item concerned by the background color.
- Message ==title:== sets the title of the window containing the list.

Finally this example shows that the message ==openWithSpec== open and place the resulting widget on the screen. 

!!! List of icons

In this example, we are going to build a list containing icons of the current theme and their respective selector using a subclass of ListModel : IconListModel.

- Message ==displayBlock:== wrap your domain specific items and should return something that can be displayed in a list, like a String. See the tips section *@sec_scrollable_buttons* for an example of displaying widgets.

[[[label=ex_icon_list|caption=Code of the Icons List|language=Smalltalk
	| iconList |
	iconList := IconListModel new.
	iconList
		items: Smalltalk ui icons allIconNames asSortedCollection;
		displayBlock: [ :selector | selector asString ];
		sortingBlock: [ :selectorA :selectorB | selectorA < selectorB ];
		icons: [ :each | Smalltalk ui icons iconNamed: each ];
		title: 'Availiable icons for the current theme.'.
	iconList openWithSpec
]]]

+Render of the List of Icons>file://figures/IconList.png|width=50|label=fig_IconList+


!!! Shortcut Instanciation

In the previous example, we explicitly referred to the class ==ListModel==. Note that the 
superclass ==ComposableModel== provides shorcut methods for the most used basics widget.
Its definition for ==newList== in the code *@ex_newlist*.

[[[label=ex_newlist|caption=Code of ComposableModel >> newList|language=Smalltalk
ComposableModel >> newList
	^ self instantiate: ListModel
]]]

Similarly ==ComposableModel== defines message for ==newButton==, ==newCheckBox==, ==newDropList==,...
Note that the interest of having such methods is unclear and can be revisited in future versions of Spec. 



!! ButtonModel and LabelModel
@sec_buttonModel

This example show a create a widget and how to basically control the window and the layout used for the render.

!!! Create the widget

That example is a bit more complex and we have to create a class from which it will be instantiated. That class must be a subclass of ==ComposableModel==.

[[[label=ex_CustomerStatisfaction_classcreation|caption=Creation of the class to manage subwidgets|language=Smalltalk
ComposableModel subclass: #CustomerStatisfaction
	instanceVariableNames: 'calcScreen button0 button1 button2'
	classVariableNames: ''
	package: 'Spec-BuildUIWithSpec-FirstContact'
]]]

Basically, at the instance side of the class we will declare the widgets that we will be using, some aspects of these widgets like labels, actions, states, and the logic of the application and the glue between these widgets. On the other hand, at class side, we will set up the basic design of our GUI -how the widgets are laid out- and its title.

Summarizing:
- instance side: widget instantiation along with actions performed by these and application logic.
- class side: widget layout i.e., how all our widgets will be laid out in a window.

!!! Instanciate Subwidgets

A subclass of ==ComposableModel== have responsibility to define the ==initializeWidgets== method and defaultSpec class method. In which we will instanciate buttons and the screen with methods provided by the superclass.

First, the message ==instantiate:== can be used to instanciate basics widgets or widgets, it will configure some variable like ==owner== which is use to keep the hierachy of widgets.

Then, we define buttons :
- Message ==label:== define the label which will be display on them
- Message ==action:== define the block to perform when they are acliked
- Message ==icon:== define an icon which will be display near the label
Note that ==label:== is used to define the default text on the screen. Then, it used by buttons to change this text.

Finally, its a good practice to define the focus order, it use for keyboard navigation.

[[[label=ex_CustomerStatisfaction_initializewidgets|caption=Code of CustomerStatisfaction >> initializeWidgets|language=Smalltalk|
CustomerStatisfaction >> initializeWidgets

	"widgets instanciation"
	screen := self instantiate: LabelModel.
	buttonHappy := self instantiate: ButtonModel.
	buttonNeutral := self instantiate: ButtonModel.
	buttonBad := self instantiate: ButtonModel.

	"widgets configuration specification"
	screen label: 'Tell us ?'.
	buttonHappy
		label: 'Happy';
		action: [ screen label: buttonHappy label ];
		icon: (Smalltalk ui icons iconNamed: #thumbsUp).
	buttonNeutral
		label: 'Neutral';
		action: [ screen label: buttonNeutral label ];
		icon: (Smalltalk ui icons iconNamed: #user).
	buttonBad
		label: 'Bad';
		action: [ screen label: buttonBad label ];
		icon: (Smalltalk ui icons iconNamed: #thumbsDown).

	"specification of order of focus"
	self focusOrder
		add: buttonHappy;
		add: buttonNeutral;
		add: buttonBad
]]]


In the following class side method ==defaultSpec==, the ==newRow:origin:corner:== is important to let enought place at the screen. Further informations about methods to define the layout are given in section *@sec_layout*. Pay attention the argument of the ==add:== messages are accessors refered by their symbols.

[[[label=ex_CustomerStatisfaction_defaultspec|caption=Code of CustomerStatisfaction class >> defaultSpec|language=Smalltalk|
CustomerStatisfaction >> defaultSpec
	<spec: #default>
	^ SpecLayout composed
		newRow: [ :row | row add: #screen ] origin: 0 @ 0 corner: 1 @ 0.2;
		newRow: [ :row | 
			row
				add: #buttonHappy;
				add: #buttonNeutral;
				add: #buttonBad ]
			origin: 0 @ 0.2
			corner: 1 @ 1;
		yourself
]]]


!!! The methods to control the window

!!!! The title method

Overide the ==title== method in the subclass change the title of the window, like the call at the ==title:== method.

[[[caption=code of CustomerStatisfaction class >> title|language=Smalltalk|
CustomerStatisfaction >> title
	^ 'Customers satisfaction'
]]]

!!!! The initialExtent and extent: methods

Similarly, overide the ==initialExtent== method set the initial size of the window. ==ComposableModel== provide the message ==extent:== to do that, but it must be called before the method to instanciate the window.


!!!! The methods to instanciate the Window

@@todo may give more informations about modal

==ComposableModel== provides methods to open a window containing a widget.
==openWithSpec== is the most basic.
Here, it will use the layout provide by the method containing the pragma "<spec: #default>" and should give the figure *@fig_Customers_Basic*.
Further information about the layout lookup are given in the Chapter *@cha_deeper_into_spec*

[[[language=Smalltalk
CustomerStatisfaction new openWithSpec
]]]

+Render of CustomerStatisfaction>file://figures/Customers_Basic.png|width=50|label=fig_Customers_Basic+

Another method of ==ComposableModel==, ==openDialogWithSpec==, open the model in a dialog window, the following code should give the figure *@fig_Customers_Dialog*.

[[[language=Smalltalk
CustomerStatisfaction new openDialogWithSpec
]]]

==ComposableModel== provide the accessor ==window== to access at the instance of the created window.

+CustomerStatisfaction in a Dialog Window>file://figures/Customers_Dialog.png|width=50|label=fig_Customers_Dialog+


!!! Declaring a Different Layout

Others methods of ==ComposableModel== let specify the layout to use, like ==openWithSpec:==.
So we can declare a different layout for the same model. 

[[[label=ex_CustomerStatisfaction_layout|caption=Code of the New Layout for CustomerStatisfaction |language=Smalltalk|
CustomerStatisfaction class >> layout
	<spec>
	^ SpecLayout composed
		newColumn: [ :column | column add: #screen ] origin: 0 @ 0 corner: 0.2 @ 1;
		newColumn: [ :column | 
			column
				add: #buttonHappy;
				add: #buttonNeutral;
				add: #buttonBad ]
			origin: 0.2 @ 0
			corner: 1 @ 1;
		yourself
]]]

@@todo expliquer <spec> (briefly, more explaination are given in the chapter "Deeper into Spec")

[[[language=Smalltalk
CustomerStatisfaction new openWithSpec: #layout
]]]

+Render of New Layout for CustomerStatisfaction>file://figures/Customers_NewLayout.png|width=50|label=fig_Customers_NewLayout+


!! TextInputFieldModel and Dynamic Widget : The Popup
@sec_textInputFieldModel

This example shows how to design a popup window asking for an input, created dynamically.

The widget is an instance of a subclass of ==ComposableModel== named ==DynamicComposableModel==.

[[[label=ex_popup_classcreation|caption=Creation of the class DynamicalPopup|language=Smalltalk|
DynamicComposableModel subclass: #DynamicalPopup
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Spec-BuildUIWithSpec-FirstContact'
]]]

!!! Widget instanciation

The message ==instantiateModels:== provide by ==ComposableModel== instanciates several models at once. It takes as argument an array of pairs, where each pair is composed of the unique name of the widget as key (here #inputLabel #inputText), and the name of the widget class to instanciate as value (here #LabelModel #TextInputFieldModel).

But note that ==DynamicComposableModel== :
- provide a Dictionnary ''widget'' and its getter ==widget==.
- specialize ==instantiateModels:== to put widgets instanciated in the Dictionary using their names as keys.
- specialize ==doesNotUnderstand:== to access these widgets by a search on the Dictionary before rise an exception, so creating acessors is not required (and could break the widget). Notice that this mechanism is used to specified the focusOrder.

[[[label=ex_popup_initializewidget|caption=Code of DynamicalPopup >> initializeWidgets|language=Smalltalk|
DynamicalPopup >> initializeWidgets
	"Widgets instanciation"
	self instantiateModels: #(#label #LabelModel #textInput #TextInputFieldModel).

	"Widgets configuration specification"
	self title: 'Choose your project'.
	self label label: 'Packages :'.
	self textInput
		autoAccept: true;
		entryCompletion: nil;
		ghostText: '.*';
		bindKeyCombination: Character cr toAction: [ self toolbar triggerOkAction ].

	"Defining dynamically the layout"
	self
		layout:
			(SpecLayout composed
				newRow: [ :row | 
					row
						add: #label origin: 0 @ 0 corner: 0.3 @ 1;
						add: #textInput origin: 0.3 @ 0 corner: 1 @ 1 ];
				yourself).
	
	"specification of order of focus"
	self focusOrder add: self textInput
]]]

!!! API of TextInputFieldModel

In Widgets configuration specification, the following messages are provide by the API of ==TextInputFieldModel== :
- Message ==autoAccept:== specify that the text field should automatically accept the text on each keystroke, such that it does not show the yellow 'edited' triangle on the top right and content don't need to be saved.
- Message ==entryCompletion:== set an instance ==EntryCompletion== to treat the input.
- Message ==ghostText:== set the text of the ghost text.
- Message ==bindKeyCombination:== set a shortcut associate at a block to perfom, here it make the entry key the same effect than a click on the ''Ok'' button.

!!! Set the layout dynamically

==DynamicComposableModel== provide a variable ''layout'' and its setter ==layout:==, and it specialize ==openWithSpec== to try to use this layout if it has been specified before use the search of ==ComposableModel==.

!!! Set an Action at ''Ok''

[[[label=ex_popup_defaulttoolbar|caption=Code of DynamicalPopup >> defaultToolbarConfiguration|language=Smalltalk|
DynamicalPopup >> defaultToolbarConfiguration
	self window okAction: [ Transcript show: self inputText text ]
]]]

Here, ''self window'' is the default toolbar created by ==openDialogWithSpec==. The message ==okAction:== set a block to perform when the ''Ok'' button is clicked, here we simply print the content of the field in the Transcript.

That method must be called after the instanciation of the window.

[[[label=ex_popup_exampledefaulttoolbar|caption=Code to launch the DynamicalPopup with the Default Toolbar|language=Smalltalk|
DynamicalPopup >> exampleDefaultToolbar
	| example |
	example := self new.
	example openDialogWithSpec.
	example defaultToolbarConfiguration
]]]

+Render of the Popup>file://figures/Popup.png|width=50|label=fig_popup+

!!! Change the Toolbar

The default toolbar of the ==DialogWindowModel== has an ''Ok'' button and a ''Cancel'' button.
To get a widget with a single button ''Ok'', the toolbar to use should be defined explicitly using the window's accessor ==toolbar:==.

[[[label=ex_popup_newtoolbar|caption=Code of a New Toolbar for the popup|language=Smalltalk|
DynamicalPopup >> alternativeToolbar
	"Instanciate the alternative toolbar"
	self instantiateModels: #(#toolbar #OkToolbar).

	"Configuring the alternative toolbar"
	self toolbar okAction: [ Transcript show: self textInput text ].

	"Set the alternative toolbar in the window"
	self window toolbar: self toolbar
]]]

That method must be called after the instanciation of the window.

[[[label=ex_popup_examplenewtoolbar|caption=Code to launch the Example with the Alternative Toolbar|language=Smalltalk|
DynamicalPopup >> exampleAlternativeToolbar
	| example |
	example := self new.
	example openDialogWithSpec.
	example alternativeToolbar
]]]


+Render of the Popup with a New Toolbar>file://figures/Popup_NewToolbar.png|width=50|label=fig_popup_newtoolbar+


!! RadioButtonModel and initializePresenter

That example show the use of ==RadioButtonGroupModel== to managed radiobuttons. And the method ==initializePresenter== that manage interaction between subwidgets.

Notice that ==MrAndMrsRadioButton== is a subclass of ==ComposableModel== have a subwidget ==RadioButtonGroupModel== which is a subclass of ==DynamicComposableModel==, they are compatible.

[[[label=ex_radio_classcreation|caption=Creation of the class MrAndMrsRadioButton|language=Smalltalk|
ComposableModel subclass: #MrAndMrsRadioButton
instanceVariableNames: 'labelGreeting textName buttonGreet groupRadio'
classVariableNames: ''
package: 'Spec-BuildUIWithSpec-FirstContact'
]]]

Here, the buttons created are not subwidgets of ==MrAndMrsRadioButton== but of the ''groupRadio''.

==RadioButtonGroupModel== provide :
- Message ==addRadioButton:== add a RadioButton at the group and do all necessary things to manage it properly :
-- it configures the variables of the button to keep the hierarchy coherent
-- it manages the deselection of other button when one is activated
-- it creates an accessor ==radioX== where X is a number depending of the place of the button (first button added will be radio1, second button will be radio2, ...)
- Message ==default:== activates the specified button. Here, we use the accessor created by ==addRadioButton:==, it's equivalent at ''default: radioMr''.
- ValueHolder ==currentActevated== and its accessors, what contains the last activated button, and provide an hook ==whenCurrentActivatedChanged:== which propagate an event when a change happend

[[[label=ex_radio_initializewidget|caption=Code of MrAndMrsRadioButton >> InitializeWidget|language=Smalltalk|
MrAndMrsRadioButton >> initializeWidgets
	| radioMr radioMs radioMrs |
	"Widgets instanciation"
	self
		instantiateModels: #(#labelGreeting #LabelModel #textName #TextInputFieldModel #buttonGreet #ButtonModel).

	"Widgets configuration specification"
	labelGreeting label: 'Enter your name.'.
	textName autoAccept: true.
	buttonGreet
		label: 'Greet Me!';
		disable.

	"RadioButton creation"
	radioMr := RadioButtonModel new.
	radioMs := RadioButtonModel new.
	radioMrs := RadioButtonModel new.
	radioMr label: 'Mr.'.
	radioMs label: 'Ms.'.
	radioMrs label: 'Mrs.'.

	"Adding the group for RadioButton"
	groupRadio := self instantiate: RadioButtonGroupModel.
	groupRadio
		addRadioButton: radioMr;
		addRadioButton: radioMs;
		addRadioButton: radioMrs;
		default: groupRadio radio1.

	"specification of order of focus"
	self focusOrder
		add: textName;
		add: buttonGreet;
		add: groupRadio
]]]

==AbstractWidgetModel==, whom subclasses are basics widgets, provide the accessors ==enabled== and ==enabled:==, and the shortcuts ==enable== and ==disable==. It can be used to create tricks like in the section @sec_noneditable_textfield.


!!! A first initializePresenter

The method ==initializePresenter== is used to define relations between elements of the widget.

[[[label=ex_radio_initializepresenter|caption=Code of MrAndMrsRadioButton >> initializePresenter|language=Smalltalk|
MrAndMrsRadioButton >> initializePresenter
	"Hook for events"
	textName whenTextChanged: [ buttonGreet enable ].

	"Specification of the Button's Action"
	buttonGreet action: [ labelGreeting label: 'Hello, ' , groupRadio currentActivated label , ' ' , textName text.
	buttonGreet disable ]
]]]

- Messages named like ==when...== are hooks provided by widgets, they performed the specified block when their event happend. The most often they use directly the hook ==whenChangedDo:== provide by NewValueHolder.
- Message ==action:== set a block to perform when the button is clicked.
- ==currentActivated== and its acessors are provided by ==RadioButtonGroup==, it contains the button activated.

!!! Another way to make a simple layout

==SpecColumnLayout== is the object created by ==newColumn:==.

[[[label=ex_radio_layout|caption=Code of another way to define the Layout of MrAndMrsRadioButton|language=Smalltalk|
MrAndMrsRadioButton >> defaultSpec
	<spec: #default>
	^ SpecColumnLayout new
		add: #labelGreeting;
		add: #textName;
		add: #buttonGreet;
		add: #groupRadio;
		yourself
]]]

+Render of MrAndMrsRadioButton>file://figures/MrAndMrsRadioButton.png|width=50|label=fig_MrAndMrsRadioButton+


!! Menus
@sec_littletoolbar

@@todo integrate LittleToolbar, explain

- ==MenuModel== contains ==MenuGoupModel== and displays them spepareted by a splitter.
- ==MenuGoupModel== contains ==MenuItemModel==.
- ==MenuItemModel==, each of them will be a button in the menu, they wears their behaviour and their appearence.

@@todo explain the message ==applyTo:==

[[[label=ex_littletoolbar_initializeWidgets|caption=Code of LittleToolbar >> initializeWidgets|language=Smalltalk|
LittleToolbar >> initializeWidgets
	menu := self instantiate: MenuModel.
	self configMainMenu.
	menu applyTo: self
]]]

The layout dislay simply the menu.

[[[label=ex_littletoolbar_defaultSpec|caption=Code of LittleToolbar >> defaultSpec|language=Smalltalk|
LittleToolbar >> defaultSpec
	<spec: #default>
	^ SpecLayout composed
		newColumn: [ :column | column add: #menu ];
		yourself
]]]

- The message ==addGroup:== is provided by ==MenuModel== to create a new ==MenuGoupModel==.
- The message ==addItem:== is provided by ==MenuGoupModel== to create a new ==MenuItemModel==.


==MenuItemModel== provides the following methods to control its apperence:
- ==name:== is the text appearring at in the button.
- ==icon:== is the icon appearring at in the button.
- ==description:== is diplayed in a tooltips.
- ==shortcut:== to add a shorcut to activate the item,the shortcut is diplayed near the name.

And to control the following methods its behaviour, it should be defined only one in the same time:
- ==subMenu:== to open the specified menu.
- ==action:== to perform the specified block.

[[[label=ex_littletoolbar_configMainMenu|caption=Code of LittleToolbar >> configMainMenu|language=Smalltalk|
LittleToolbar >> configMainMenu
	menu
		addGroup: [ :group1 | 
			group1
				addItem: [ :item | 
					item
						name: 'File';
						subMenu: self createSubMenu ].
			group1
				addItem: [ :item | 
					item
						description: 'Open file';
						icon: (Smalltalk ui icons iconNamed: #openIcon);
						action: [ self inform: 'Open File' ] ] ];
		addGroup: [ :group2 | 
			group2
				addItem: [ :item | 
					item
						description: 'Add menu item';
						icon: (Smalltalk ui icons iconNamed: #add);
						action: [ self dynamicalAdding: group2 ] ] ]
]]]

==createSubMenu== return a new MenuModel with two items.

[[[label=ex_littletoolbar_createSubMenu|caption=Code of LittleToolbar >> createSubMenu|language=Smalltalk|
LittleToolbar >> createSubMenu
	^ MenuModel new
		addGroup: [ :group | 
			group
				addItem: [ :item | 
					item
						name: 'Save';
						icon: (Smalltalk ui icons iconNamed: #smallSaveIcon);
						shortcut: $s meta;
						action: [ self inform: 'Save' ] ].
			group
				addItem: [ :item | 
					item
						name: 'Print';
						shortcut: $p meta;
						icon: (Smalltalk ui icons iconNamed: #smallPrintIcon);
						action: [ self inform: 'Print' ] ] ]
]]]

==dynamicalAdding:== creates a new item, configures the item to remove itself when is clicked and adds the item to the specified group.

[[[label=ex_littletoolbar_dynamicalAdding|caption=Code of LittleToolbar >> dynamicalAdding:|language=Smalltalk|
LittleToolbar >> dynamicalAdding: aGroup
	aGroup
		addItem: [ :item | 
			item
				name: 'Dynamic';
				icon: (Smalltalk ui icons iconNamed: #delete);
				action: [ aGroup menuItems remove: item.
					self needRebuild: false.
					self buildWithSpec ] ].
	self needRebuild: false.
	self buildWithSpec
]]]

The figure *@fig_LittleToolbar* show the result after two click on the button to add an item and a click on the button displaying a submenu

+Render of LittleToolbar>file://figures/LittleToolbar.png|width=50|label=fig_LittleToolbar+


!! Found more Examples

For the moment (and the writting) there are example in :
- Package Spec-BuildUIWithSpec
- Package Spec-Examples
- Help -> Spec -> Examples -> More Examples (example from Spec-Examples)
- BuildingUIWithSpec/material/... (extract from a previous version to be revisited)
- on StephanEggermont's repot (Ancestry and SpecGenerator)
- on the website http://spec.st/docs/home/ (drag 'n drop)
- AbstractWidgetModel subclasses (most part are in Spec-core widget) sometimes provide examples in their class side
- Same with ComposableModel subclasses in Spec-PolyWidgets

@@todo fill locations of others examples / revisit it


