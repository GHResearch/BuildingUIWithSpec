{ "title" : "Todo"}

- Motivation is a bit short and not really a nice section. 
- Chapitre trois FirstContact
-- Un vrai example customersatifaction: label + button
-- Missing conclusion

- Pillar of Spec
-- layout plus court
-- layout -> Missing conclusion

- Chapitre 5
-- on bouge WidgetClassList et ProtocolList dans Chapitre 3
-- missing step back part. 

- Chapitre Layout

- 8 
-- chapitre menu on list or text + menubar
-- Other widgets: textinputfield, radio, tab
-- popup -> dynamic



- chapitre dynamic 
-- on reecrit

- chapitre tips and tricks


- chpaitre 9 at the end 

- (done) rename preface into intro/motivation


- (done) ModelList should be renamed in Pharo WidgetClassList

- (in Tips, temporarly) We should add a section on how to find example in the image: in Chapter two. 
-- ComposableModel subclasses
-- opening modal

- Chapitre Windown
- - add DialogModel
-- open any spec model in modal : openWithDialogSpec: 

--initialExtent should be put into (do not forget to say that this is only for window)

- (in progress) revisit the examples  (and : rename it, place it in better package, revisit the help of pharo about Spec)


%{ "title" : "Spec: a framework for describing user interfaces"}
! Spec: a framework for describing user interfaces

!! Introduction

This document presents the Spec UI builder framework. ''Spec'' has been originally developed by B. Van Ryseghem based on an idea of S. Ducasse. It is now maintained by the community and the Pharo core team.

!!! In a nutshell
Spec is based on the idea that UI building should support UI logic reuse. Spec is influenced by VisualWorks and Dolphin Model View Presenter (MVP) in the sense that it recognizes the need for a Presenter or ApplicationModel class, in Spec called ComposableModel that manages the logic and the link between widgets and domain objects. Spec, following the tradition, uses ''value holders'', simple objects raising announcements when their values, often domain objects, change. Such value holders allows for the connection of domain objects that are totally unaware of UI elements. 


!!! Goal
In this documentation, originally written by B. Van Ryseghem and J. Fabry and now maintained and massively updated by S. Ducasse and J. Fabry, we will teach you how to use Spec through several examples.  We will show how to reuse a UI logic and its elements. 
We will also provide an overview of the functionalities of ''Spec''.


!!! Thanks
We thank Sean De Nigris for his editing support. The documentation is actively maintained. Suggestions for improvements are welcome via the Pharo mailing-list. We thank Peter Uhnak for the discussions and the code exploration that led to cleaning some aspects of Spec.


!! Terminology

To avoid possible misunderstandings due to confusion in terminology, we first define the following four terms, which will be used frequently:

;UI Element
:an interactive graphical element displayed as part of the graphical user interface.
;UI Model
:an object that contains the state and behavior of one or several UI elements.
;Widget
:the union of a UI Element and its UI model. They are subclass of ==ComposableModel==.
;Basic widgets
:low-level widgets like a list, a button, etc. They are subclass of ==AbstractWidgetModel== and not composed of other Spec widgets.


!! Motivation: Supporting Interaction Reuse

Writing user interfaces is notoriously a tedious task. It often requires time and a clear understanding of the separation of concerns between the logic of the model and the logic of the user interface. Indeed, many frameworks mix domain models with widget models.

''Spec'' is a framework for describing user interfaces.  It allows for the separation of concerns between the different parts of the user interface as expressed in the MVP pattern, on which it is inspired.
''Spec'' emphasizes the reuse of widgets as well as their customization.
 


@@todo show that the logic can be reused in two different UI elements

@@todo show that a UI can be shaped differently


!! Structure of the document

The structure of this document is as follows:
- 
- 
- 
- 


@@todo should be update after the work on the book

