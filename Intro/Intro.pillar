{
	"metadata" : {
		"title" : "Introduction"
	}
}
@cha_introduction


Spec is a framework in Pharo for describing user interfaces. It allows for the construction of a wide variety of UIs; from small windows with a few buttons up to complex tools like a debugger. Indeed multiple tools in Pharo are written in Spec, e.g., the Watchpoint window, Komitter, Change Sorter, Critics Browser, and the Pharo 3 debugger. 

The fundamental principle behind Spec is reuse of user interface logic and visual composition. User interfaces are built by reusing and composing existing user interfaces, configuring them as needed. This principle starts from the most primitive elements of the UI: widgets such as buttons and labels are in themselves complete UIs that can be reused, configured, and opened in their own window. These elements can be combined to form more complex UIs that again can be reused as part of a bigger UI, and so on. This is somewhat similar to how the different tiles on the cover of this book are combined. Smaller tiles configured with different colors or patterns join to form bigger rectangular shapes that are a part of an even bigger floor design. 

To allow such reuse, Spec is influenced by VisualWorks and Dolphin Smalltalks' Model View Presenter (MVP) pattern. Spec recognizes the need for a Presenter or ApplicationModel class (in Spec called ComposableModel) that manages the logic and the link between widgets and domain objects. Fundamentally, when writing Spec code, the developer does ''not'' come into contact with UI widgets, instead a ComposableModel is programmed that holds the UI logic. When the UI is opened this model will then instantiate the appropriate widgets. This being said, for the programmer this distinction is not really apparent and it feels as if the widgets are being programmed directly.

Spec is a standard UI framework in Pharo and differs from the other UI frameworks present: Morphic and the GT Tools. Morphic is a general-purpose graphics system originally built for the Self language, and later included in Squeak (the ancestor of Pharo). Morphic provides standard UI widgets, and as such is used by Spec to render UI's, but can also be used to build any kind of graphical shape and allows for their direct manipulation. Spec is more restricted than Morphic in that it only allows one to build user interfaces for applications that have typical GUI widgets such as buttons, lists et cetera. The GT tools are more restrictive than Spec since they target the domain of development tools. The GT Tools therefore restrict and simplify UI construction to layouts and workflows typical to development environments. Spec does not have these restrictions, which can make UI construction more intricate but allows for a wider variety of UIs to be built.

A significant drawback of Spec until now is that it did not have good quality documentation. Documentation was scattered, sometimes hard to understand and overall not user friendly. We believe that this has caused unneeded barriers to adoption and have therefore written this book to adress this issue. While the contents of this book is based on existing Spec documentation, almost all text has been completely rewritten in order to provide better quality documentation. We hope that this book will be of use to developers that need to write UI's in Pharo by significantly easing the UI development experience with Spec.

@@note While Spec comes as standard in Pharo 3 and above, this book focuses on Pharo 5 and 6. Earlier and later versions of Pharo may have implementations of Spec that differ, causing some example code here to not work. Nonetheless, the fundamental principles of UI development in Spec will hold and example code changes will therefore be minor.

This book should be read as follows: Chapter 2 and 3 give a first contact with Spec and talk about how reuse is at the core of Spec. These chapters should be read completely by a Spec novice. The fourth chapter treats the fundamentals of Spec and gives a more complete, conceptual overview of how the different parts of a Spec UI work together. This is recommended reading for all Spec users, since a better understanding of the fundamentals will ease UI development at all user experience levels. Chapters 5 and beyond are considered more as reference material to be read on demand. This being said, Chapter 5 treats layouts, which is required by all UIs. Hence it does make sense for all Spec users to read it, so that they can construct their UI layout in the best possible way.  Lastly, Chapter 9 gives an assortment of tips and tricks that can be useful in a wide variety of settings, so we recommend all readers of this book to at least browse through it.
