{ "title" : "The Layouts Construction"}
@cha_layout_construction

As layouts can become quite complex, this section provides a list of examples of the construction of layouts.
- First two examples are given of the use of rows and columns *@sec_layout_rows_and_column*.
- This is followed by two examples that explain how to set a fixed size *@sec_layout_set_size_pixels* for rows and columns.
- Next is an example that explains how to specify a widget proportionally *@sec_layout_percentage*.
- The last example presents the expert *@sec_layout_expert* mode in case everything else fails.
- To conclude, this section ends with a little explanation *@sec_layout_specify* of how to specify which layout to use when a model defines multiple layouts.

All the methods for adding sub widgets can be found in the ''commands'' and ''commands-advanced'' protocols of ""SpecLayout"".


!! Rows and Column
@sec_layout_rows_and_column
Often the layout of user interfaces can be described in rows and columns, and ""Spec"" provides for an easy way to specify such layouts.
The example *@ex_layout_row* shows how to build a row of widgets.

[[[label=ex_layout_row|caption=Code of a Row of widgets|language=Smalltalk 
^ SpecLayout composed
	newRow: [ :row |
		row
			add: #theList;
			add: #theButton
	];
	yourself
]]]

+Render of a Row of Widgets>file://figures/RowOfWidgets.png|width=50|label=fig_RowOfWidgets+

Having the widgets rendered as a column is similar, as shown in the example *@ex_layout_column*

[[[label=ex_layout_column|caption=Code of a Column of widgets|language=Smalltalk 
^ SpecLayout composed
	newColumn: [ :column |
		column
			add: #theList;
			add: #theButton
	];
	yourself
]]]

+Render of a Column of Widgets>file://figures/ColumnOfWidgets.png|width=50|label=fig_ColumnOfWidgets+

Rows and columns can be combined to build more complex layouts, and splitters between cells can be added.
The example *@ex_three_columns* shows how to create a 3 columns layout, containing three buttons in each column.
This example also shows the ==addSplitter== message, which adds a splitter between the element added before it and the element added after.

[[[label=ex_three_columns|caption=Code of a 3-column layout|language=Smalltalk 
^ SpecLayout composed
				newRow: [ :row | 
					row
						newColumn: [ :column | 
							column
								add: #button1;
								add: #button4;
								add: #button7 ];
						addSplitter;
						newColumn: [ :column | 
							column
								add: #button2;
								add: #button5;
								add: #button8 ];
						addSplitter;
						newColumn: [ :column | 
							column
								add: #button3;
								add: #button6;
								add: #button9 ] ];
				yourself
]]]

+Render of three Columns of Widgets>file://figures/ThreeColumns.png|width=50|label=fig_ThreeColumns+


!! Set Size in pixels
@sec_layout_set_size_pixels
The height of rows as well as the width of columns can be specified, to prevent them to take all the available space.
The example *@ex_row_height* shows how to specify the height of a row in pixels while the example *@ex_column_width* shows how to specify the column width.

[[[label=ex_row_height|caption=Code of a Row of 30 pixels|language=Smalltalk 
^ SpecLayout composed
	newRow: [ :row |
		row
			add: #theList;
			add: #theButton
	] height: 30;
	yourself
]]]

+Render of a Row of 30 pixels>file://figures/Row30pixels.png|width=50|label=fig_Row30pixels+

[[[label=ex_column_width|caption=Code of a Column of 50 pixels|language=Smalltalk 
^ SpecLayout composed
				newColumn: [ :column | 
					column
						add: #theList;
						add: #theButton ]
					width: 50;
				yourself
]]]

+Render of a Column of 50 pixels>file://figures/Column50pixels.png|width=50|label=fig_Column50pixels+

Note that it is generally considered a bad habit to hardcode the size of the widgets.
Methods are available on ''ComposableModel'' providing sensible default sizes, like the width of a button.
When specifying custom widget sizes, care should be taken to take in account the current font size.


!! Percentage
@sec_layout_percentage
It is also possible to specify the percentage of the container, e.g. the window, that a widget should occupy.
As a result of this, the widget size will change accordingly when the container is resized.
To do so, the proportional position of the four sides of a widget can be specified, as shown in the example *@ex_layout_proportional*.

For each edge, the proportion indicates at what percentage of the overall container the edge should be placed.
Zero percent is the container edge, 100 percent is the opposite container edge.
For example, for the top edge, the percentage is counted from the top down: 0 is the top edge, and 1 is the bottom edge.

[[[label=ex_layout_proportional|caption=Code of a Button centered in, and half the size of its container|language=Smalltalk 
^ SpecLayout composed
	add: #theButton top: 0.25 bottom: 0.25 left: 0.25 right: 0.25;
	yourself
]]]

+Render of a centrered Button>file://figures/CentreredButton.png|width=50|label=fig_CentreredButton+

Also, the argument can be an integer if the offset has to be a fixed number of pixels.
The number of pixels should be positive, as it indicates a distance from the corresponding edge, going to the opposite edge.


!! Expert Mode
@sec_layout_expert
The previous examples should cover most of the cases of layout of widgets.
For the remaining cases there is a last way to specify a widget by specifying its position.

The method ==add: origin: corner: == of ==SpecLayout== specifies the layout of a widget, percentage-wise from the origin point to the corner point.
These two points represent respectively the top left corner and the bottom right corner of the widget.
The arguments express a percentage of the container, so these __must__ be between ''0@0'' and ''1@1'' .

In addition to those points, two offsets can be also be specified, using the method ==add: origin: corner:  offsetOrigin: offsetCorner: ==.
The offsets specify the number of pixels that the origin and the corner should be moved.

Contrary to the previous way to define layouts, while using ==add: origin: corner:  offsetOrigin: offsetCorner: == the offset can be negative.
The offset expresses the number of pixels from the corresponding corner, in the classical computer graphics coordinate system where the origin is in the top left corner.
Note that this approach is similar to the ProportionalLayout of ""Morphic"".


The example *@ex_layout_expert* shows how to add a widget looking like a toolbar.
Here we reuse theButton for simplicity, we specifie that it take all the window width but only 30 pixels in height.

[[[label=ex_layout_expert|caption=Code using Expert Mode to specify a Toolbar|language=Smalltalk 
^ SpecLayout composed
				add: #theButton
					origin: 0 @ 0
					corner: 1 @ 0
					offsetOrigin: 0 @ 0
					offsetCorner: 0 @ 30;
				yourself
]]]

+Render of a Toolbar made with the Expert Mode>file://figures/ExpertModeToolbar.png|width=50|label=fig_ExpertModeToolbar+

