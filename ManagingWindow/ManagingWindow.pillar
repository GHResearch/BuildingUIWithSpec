{
	"metadata" : {
		"title" : "Managing windows"
	}
}
@cha_managing_windows

@@todo JF REWRITE


!!! A working example

To illustrate the window configuration options that are available, we use a simple ==WindowExample== class that has two buttons placed side by side. These buttons do not have any behavior associated yet, this will be added in an example at the end of the chapter.

[[[
ComposableModel subclass: #WindowExample
   instanceVariableNames: 'button1 button2'
   classVariableNames: ''
   package: 'Spec-BuildUIWithSpec'
]]]
[[[
WindowExample >> initializeWidgets
   button1 := self newButton.
   button2 := self newButton.
   button1 label: '+'.
   button2 label: '-'.
]]]
[[[
WindowExample class >>defaultSpec
   ^ SpecRowLayout composed
         add: #button1; add: #button2; yourself.
]]]



!! Methods provided by ComposableModel


@@todo may explain the following methods of ==ComposableModel==:
- hasWindow
- isDisplayed
- windowIcon: (spirita: i have try it without see any change)
- askOkToClose:


!!Opening a window or a dialog box

!!!Opening and closing a window

== WindowExample new openWithSpec == ==openWithSpec:== and ==openWithSpecLayout:==  creates an instance of ==WindowModel==

!!!Opening a dialog box and its configuration options

Spec provides for an easy way to open a UI as a simple dialog box with ''Ok'' and ''Cancel'' buttons (that has no icons for resizing, closing or the window menu). To do this, send the message ==openDialogWithSpec== as below:

[[[
| we diag |
 we := WindowExample new. 
 diag := we openDialogWithSpec.
]]]

The result of this (e.g. assigned to the ==diag== variable above) is an instance of the  ==DialogWindowModel== class (a subclass of ==WindowModel==).  ==openDialogWithSpec== has the same variants as ==openWindowWithSpec== that take a specific layout as argument.

The ==DialogWindowModel== instance can also be configured in multiple ways. To execute code when the user clicks on a button, send it the ==okAction:== or ==cancelAction:== message with a zero-argument block. If the block returns ==false== the window will not be closed (if it returns anything else it will be closed). This allows for validation of the contents of the dialog box, only allowing it to be closed if validation succeeds. Complimentarily, the ''OK'' button can be grayed out by sending the ==okButtonEnabled: false== message, and enabled again with a ==true== argument.

Also, after a dialog box has been closed the message ==cancelled== will return ==true== if the box was closed by clicking on the ''Cancel'' button.

!! Making the window modal or acting on window close

A modal window is a window that takes control of the entire Pharo user interface, making it impossible for the user to select another window while it is open. This is especially useful for dialog boxes, but may also be needed for other kinds of windows.

Spec allows any window to be made modal by sending the message ==modalRelativeTo: World== to the ==WindowModel== that corresponds to the opened ==ComposableModel==. To get a handle on the ==WidowModel==, send the ==window== message (after the UI has been opened with ==openWithSpec==). 

[[[
| we |
 we := WindowExample new. 
 we openWithSpec.
 we window modalRelativeTo: World
]]]

@@note The argument of ==modalRelativeTo:== should always be the root of the currently shown widget hierarchy: ==World==. 

It is also possible to perform an action whenever a window is closed, by sending the ==whenClosedDo:== message to the UI's ==WindowModel==. For example, below we specify a goodbye message to deliver when our example UI is closed.

[[[
| we |
 we := WindowExample new. 
 we openWithSpec.
 we window whenClosedDo: [ UIManager default inform: 'Bye bye!' ].
]]]


!! Window size and decoration

We now focus on sizing a window before and after opening it, and then talk about removing the different control widgets that decorate the window.

!!! Setting initial size and changing size

To set the initial size of a window when it opens, either override the ==extent==
method of the corresponding ==ComposableModel== so that it returns a Point, or send the
instance the ==extent:== message before opening, for example like this:

[[[
| we |
 we := WindowExample new.
 we extent: 300@80.
 we openWithSpec
]]]

After a window is opened, it can also be resized by sending the ==extent:== message to the window of the UI. For example, we can change the ==initializeWidgets== method of our example so that the window resizes itself depending on what button is clicked.

[[[
WindowExample >> initializeWidgets
  button1 := self newButton.
  button2 := self newButton.
  button1 label: '+'.
  button2 label: '-'.
  button1 action: [ self window extent: 500@200].
  button2 action: [ self window extent: 200@100].
]]]

!!! Fixed size

The size of a window can be made fixed, so that the user cannot resize it by dragging the sides or corners. To configure this we however need to talk to the underlying widget library (==Morphic== in Pharo 5).  We get the ==Morphic== window of our example (via its ==WindowModel==) and instruct it to be unresizable as follows: 

[[[
| wewin |
 wewin := WindowExample new openWithSpec.
 wewin window beUnresizeable
]]]

!!! Removing window decoration

Sometimes it makes sense to have a window without decoration, i.e. without control widgets. Currently this configuration cannot be performed on the ==ComposableModel== of that window, but the underlying widget library may allow it. Below we show how to get the ==Morphic== window of our example and instruct it to remove the different control widgets:

[[[
| wewin |
 wewin := WindowExample new openWithSpec.
 wewin window
    removeCollapseBox;
    removeExpandBox;
    removeCloseBox;
    removeMenuBox
]]]

@@note This window is still closable using the halo menus or by calling ==close== on the ==WindowModel== instance (==wewin== in the example above).


!! Window title and about text

You can provide some textual information about the widow by providing a title and a text for the window's about dialog, as we show here.

!!! Setting and changing the title

By default, the title of a new window is '''Untitled window'''. This can be changed by overriding the ==title== method (of ==ComposableModel==) and returning a string that will be used as a title. For example, we can title our example user interface as follows:

[[[
WindowExample >> title
   ^ 'Click to grow or shrink.'
]]]

In addition, you can set the title of any UI after it has been opened (even if it specifies a ==title== method) by sending the ==title:== message with the new title as argument to the window of the UI. An example is below:

[[[
| we |
 we := WindowExample new. 
 we openWithSpec.
 we window title: 'I am different!'
]]]


!!! Setting the about text

To set the about text of a window, either override the ==aboutText== method of the corresponding
==ComposableModel== so that it returns the new about text, or send the instance the ==aboutText:== message before opening, for example like below.

[[[
| we |
 we := WindowExample new.
 we aboutText: 'Click + to grow, - to shrink.'.
 we openWithSpec
]]]
