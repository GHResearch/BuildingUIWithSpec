{
	"metadata" : {
		"title" : "Managing windows"
	}
}
@cha_managing_windows

@@todo JF REWRITE


@@todo JF give more informations about modal (setModal: aWindow).

!!! A working example

To illustrate the window configuration options that are available, we use a simple ==WindowExample== class that has two buttons placed side by side. These buttons do not have any behavior associated yet, this will be added in an example at the end of the chapter.

[[[
ComposableModel subclass: #WindowExample
   instanceVariableNames: 'button1 button2'
   classVariableNames: ''
   package: 'Spec-BuildUIWithSpec'
]]]
[[[
WindowExample >> initializeWidgets
   button1 := self newButton.
   button2 := self newButton.
   button1 label: '+'.
   button2 label: '-'.
]]]
[[[
WindowExample class >>defaultSpec
   ^ SpecRowLayout composed
         add: #button1; add: #button2; yourself.
]]]

!! Open the Window

@@todo JF This should clarify the situation of opening a normal window vs opening a dialog box vs opening a modal dialog box + what's up with DialogModel.

==ComposableModel== provides methods to open a window containing a widget.
==openWithSpec== is the most basic.
Here, it will use the layout provide by the method containing the pragma "<spec: #default>" and should give the figure *@fig_Customers_Basic*.
Further information about the layout lookup are given in the Chapter *@cha_deeper_into_spec*

[[[language=Smalltalk
CustomerStatisfaction new openWithSpec
]]]

+Render of CustomerStatisfaction>file://figures/Customers_Basic.png|width=50|label=fig_Customers_Basic+

Another method of ==ComposableModel==, ==openDialogWithSpec==, open the model in a dialog window, the following code should give the figure *@fig_Customers_Dialog*.

[[[language=Smalltalk
CustomerStatisfaction new openDialogWithSpec
]]]

+Render of CustomerStatisfaction in a Dialog Window>file://figures/Customers_Dialog.png|width=50|label=fig_Customers_Dialog+



!! Methods provided by ComposableModel

!!! The Title

By default, the title of a new window of a ==ComposableModel== is '''Untitled window'''.

Overide the ==title== method in the subclass change the title of the window, like the call at the ==title:== method.

[[[caption=Code of CustomerStatisfaction class >> title|language=Smalltalk|
CustomerStatisfaction >> title
	^ 'Customers satisfaction'
]]]


!!! The initial size

Similarly at the setting of the title, overide the ==initialExtent== method set the initial size of the window. ==ComposableModel== provide the message ==extent:== to do that, but it must be called before the method to instanciate the window.

@@todo may explain the following methods of ==ComposableModel==:
- hasWindow
- isDisplayed
- windowIcon: (spirita: i have try it without see any change)
- askOkToClose:



!! The Window

==ComposableModel== provide the accessor ==window== to access at the instance of the created window.
- ==openWithSpec== create an instance of WindowModel
- ==openDialogWithSpec== create an instance of DialogWindowModel (a subclass of WindowModel)


@@todo may explain the API methods of windows
- okAction:

The default toolbar of the ==DialogWindowModel== has an ''Ok'' button and a ''Cancel'' button.
In *@sec_textInputFieldModel*, acessor of the window is use.



@@note JF ALL BELOW IS CUT-PASTE FROM TIPS AND TRICKS



!! Setting the About text of a Window

To set the about text of a window, either override the ==aboutText== method of the corresponding
==ComposableModel== so that it returns the new about text, or send the instance the ==aboutText:== message before opening, for example like below.

[[[
| we |
 we := WindowExample new.
 we aboutText: 'But what do the buttons do?'.
 we openWithSpec
]]]


!! Window Size and Decoration

We now focus on sizing a window before and after opening it, and then talk about removing the different control widgets that decorate the window.

!!! Setting Initial Size and Changing Size

To set the initial size of a window when it opens, either override the ==extent==
method of the corresponding ==ComposableModel== so that it returns a Point, or send the
instance the ==extent:== message before opening, for example like this:

[[[
| we |
 we := WindowExample new.
 we extent: 300@80.
 we openWithSpec
]]]

After a window is opened, it can also be resized by sending the ==extent:== message. However, this message needs to be sent to the ==WindowModel== that corresponds to the opened ==ComposableModel==. To get a handle on the ==WidowModel==, send the ==window== message (after the UI has been opened with ==openWithSpec==). For example, we can change the ==initializeWidgets== method of our example so that the window resizes itself depending on what button is clicked.

[[[
WindowExample >> initializeWidgets
  button1 := self newButton.
  button2 := self newButton.
  button1 label: '+'.
  button2 label: '-'.
  button1 action: [ self window extent: 500@200].
  button2 action: [ self window extent: 200@100].
]]]

!!! Fixed Size

The size of a window can be made fixed, so that the user cannot resize it by dragging the sides or corners. To configure this we however need to talk to the underlying widget library (==Morphic== in Pharo 5).  We get the ==Morphic== window of our example and instruct it to be unresizable as follows: 

[[[
| model |
 model := WindowExample new openWithSpec.
 model window beUnresizeable
]]]

!!! Removing Window Decoration

Sometimes it makes sense to have a window without decoration, i.e. without control widgets. Currently this configuration cannot be performed on the ==ComposableModel== of that window, but the underlying widget library may allow it. Below we show how to get the ==Morphic== window of our example and instruct it to remove the different control widgets:

[[[
| model |
 model := WindowExample new openWithSpec.
 model window
    removeCollapseBox;
    removeExpandBox;
    removeCloseBox;
    removeMenuBox
]]]

@@note This window is still closable using the halo menus or by calling ==close== on the ==ComposableModel== instance (==model== in the example above).
