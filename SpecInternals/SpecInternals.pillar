{ "title" : "Spec Internals"}
@cha_spec_internals

@@todo integrate explanation of focus order


!! The Focusorder
@sec_focusorder

==ComposableModel== provides a variable '''focusOrder''' and its accessors to managed the path followed by the focus. If it lets nil the default Object is set.

[[[label=ex_focusOrder_acessor|caption=The getter ComposableModel focusOrder|language=Smalltalk 
ComposableModel>>focusOrder
	^ focusOrder ifNil: [ focusOrder := SpecFocusOrder new ]
]]]

SpecFocusOrder manages models in an OrderedCollection (presenters) and provides a getter for it and some methods like:
- ==add:== to add a model in its collection
- ==giveFocusToNextFrom:for:== to transfert the focus at the next model



@@todo check if for: aModel is mandatory

[[[label=ex_focusOrder_giveFocusToNextFrom|caption=The method SpecFocusOrder giveFocusToNextFrom|language=Smalltalk 
SpecFocusOrder>>giveFocusToNextFrom: aPresenter for: aModel
	| focus |
	focus := self presenters.
	(focus includes: aPresenter)
		ifTrue: [ | index next |
			index := (focus indexOf: aPresenter) + 1.
			index <= focus size
				ifTrue: [ next := focus at: index.
					next takeKeyboardFocus.
					^ true ] ].
	^ aModel owner
		ifNil: [ | next |
			next := focus at: 1 ifAbsent: [ ^ false ].
			next takeKeyboardFocus.
			true ]
		ifNotNil: [ aModel owner giveFocusToNextFrom: aModel.
			true ]	
]]]

That method looks for the next model to give the focus through these steps:
- It looks in its collection for the index of the object (aPresenter) currently having the focus. If it finds it, it increments the index by one.
- If it does not find it or if the new index is out of its collection bounds, it tries to give the focus to the next parent in the subwidgets' hierarchy (using aModel).
- If there is no parent, it loops at the beginning of its collection to give the focus at its first model)




!! title needed

Normal user should not have to read this chapter. ''Spec'' provides for a large amount and wide variety of basic widgets. 
In the rare case that a basic widget is missing, the ''Spec'' framework will need to be extended to add this new widget.
In this section we will explain how to create such a new basic widget.

We will first explain the applicable part of how the widget build process is performed.
This will reveal the different actors in the process and provide a clearer understanding of their responsibilities.
We then present the three steps of widget creation: writing a new model, writing an adapter, and updating or creating an individual UI framework binding.

!! One step in the building process of a widget

The UI building process does not make a distinction between basic and composed widgets.
At a specific point in the building process of a basic widget the default spec method of the widget is called, just as if it would be a composed widget.
However in this case, instead of providing a layout for multiple widgets that comprise the UI, this method builds an adapter to the underlying UI framework.
Depending of the underlying UI framework that is currently used, this method can provide different kind of adapters, for example an adapter for Morphic, or an adapter for Seaside, etc.

The adapter, when instantiated by the UI model, will in turn instantiate a widget that is specific to the UI framework being used.

For example, when using a List in the Morphic UI, the adaptor will be a MorphicListAdapter and it will contain a PluggableListMorph.
This is this framework-specific widget that will be added to the widget container.

Figure *@model_adapter_uielement* shows the relationship between those objects.

+Relationship between the model, the adapter, and the UI element>file://figures/Model-Adapter-UIElement.png|width=50|label=model_adapter_uielement+

!! The Model

The new model needs to be a subclass of ""AbstractWidgetModel"" and its name should be composed of the new basic widget concept, e.g. list or button, and of the word ''Model''.
The responsibility of the model is to store all the state of the widget.
Examples of widget-specific state are:
- the index of a list
- the label of a button
- the action block for when a text is validated in a text field

The state is wrapped in value holders and kept in instance variables.
For example, the code in *@ex_value_holder* shows how to wrap the state ==0== in a value holder and keep it as an instance variable.
Value holders are needed because they are later used to propagate state changes and thus create the interaction flow of the user interface, as discussed in Section *@cha_deeper_into_spec*.

[[[label=ex_value_holder|caption=Storing state wrapped in a Value Holder in an instance variable|language=Smalltalk 
index := 0 asValueHolder.
]]]

For each instance variable that holds state three methods should be defined: the getter, the setter, and the registration method.
The first two should be classified in the protocol named ''protocol'' while the registration method should be in ''protocol-events''.
For example, the code in *@ex_mutators* shows the methods for the example code in *@ex_value_holder*. 

[[[label=ex_mutators|caption=Example of mutators for index|language=Smalltalk 
"in protocol: protocol"
index
	^index value

index: anInteger
	index value: anInteger

"in protocol: protocol-events"
whenIndexChanged: aBlock
	index whenChangedDo: aBlock
]]]

The last step to define a new model is to implement a method ==adapterName== on the class side.
The method should be in the protocol named ''spec'' and should return a symbol.
The symbol should be composed of the basic concept of the widget, e.g. list or button, and the word ''Adapter'', like ""ListAdapter"".

The communication from the UI model to the adapter is performed using the dependents mechanism.
This mechanism is used to to handle the fact that a same model can have multiple UI elements concurrently displayed.
The message ==changed: with: == is used to send the message ''selector'' with the arguments ''aCollection'' to the adapters.
Each adapter can then convert this ''Spec'' message into a framework specific message. 
For example, the method ==#filterWith:== sent by ""TreeModel"" via ==changed: with:== is implemented as shown in *@ex_filter_with* in MorphicTreeAdapter

[[[label=ex_filter_with|caption=Implementation of MorphicTreeAdapter>>filterWith:|language=Smalltalk 
MorphicTreeAdapter>>filterWith: aFilter
	self
		widgetDo: [ :w | 
			| nodes |
			nodes := w model rootNodes.
			nodes do: [ :r | r nodeModel updateAccordingTo: aFilter ].
			self removeRootsSuchAs: [ :n | (aFilter keepTreeNode: n) not and: [ n isEmpty ] ].
			self changed: #rootNodes ].
]]]

!! The Adapter

An adapter must be a subclass of ""AbstractAdapter"".
The adapter name should be composed of the UI framework name, e.g. Morphic, and the name of the adapter it is implementing, e.g. ListAdapter.
The adapter is an object used to connect a UI framework specific element to the framework independent model.

The only mandatory method for an adapter is ==defaultSpec== on the class side.
This method has the responsibility to instantiate the corresponding UI element.

The example *@ex_adapter_instanciation* shows how ""MorphicButtonAdapter"" instantiates its UI element.

[[[label=ex_adapter_instanciation|caption=How ""MorphicButtonAdapter"" instantiates its UI element|language=Smalltalk 
defaultSpec
	<spec>
	
	^ #(PluggableButtonMorph
			#color:								#(model color)
	    	#on:getState:action:label:menu: 	#model #state #action #label nil
			#getEnabledSelector: 				#enabled
			#getMenuSelector:					#menu:
			#hResizing: 						#spaceFill
			#vResizing: 						#spaceFill
			#borderWidth:						#(model borderWidth)
			#borderColor:						#(model borderColor)
			#askBeforeChanging:					#(model askBeforeChanging)
			#setBalloonText:					#(model help)
			#dragEnabled:						#(model dragEnabled)
			#dropEnabled:						#(model dropEnabled)	
			#eventHandler:						#(EventHandler on:send:to: keyStroke keyStroke:fromMorph: model))
]]]

Since the adapter is bridging the gap between the element of the UI framework and the model, the adapter also needs to forward the queries from the UI element to the model.
Seen from the other way around: since the model is holding the state, the adapter is used to update the UI element state of the model.

The methods involved in the communication from the model to the adapter as well as the methods involved in the communication from the adapter to the UI model should be in the protocol ''spec protocol''.
On the other hand the methods involved in the communication from the adapter to the UI element and vice versa should be categorized in the protocol ''widget API''.

To communicate with the UI element, the adapter methods use the method ==widgetDo:==.
This method executes the block provided as argument, which will only happen after the UI element has already been created.

The example *@ex_emphasis* shows how ""MorphicLabelAdapter"" propagates the modification of the emphasis from the adapter to the UI element.

[[[label=ex_emphasis|caption=How MorphicLabelAdapter propagates the emphasis changes|language=Smalltalk 
emphasis: aTextEmphasis

	self widgetDo: [ :w | w emphasis: aTextEmphasis ]
]]]



!!! The UI Framework binding

The binding is an object that is used to resolve the name of the adapter at run time.
This allows for the same model to be used with several UI frameworks.

Adding the new adapter to the default binding is quite simple.
It requires to update two methods: ==initializeBindings== in ""SpecAdapterBindings"" and ==initializeBindings== in the framework specific adapter class, e.g. ""MorphicAdapterBindings"" for Morphic.

The method ==SpecAdapterBindings>>initializeBindings== is present only to expose the whole set of adapters required.
It fills a dictionary, as shown in the code *@ex_adapter_init*.

[[[label=ex_adapter_init|caption=Implementation of SpecAdapterBindings>>initializeBindings|language=Smalltalk 
initializeBindings
	"This implementation is stupid, but it exposes all the containers which need to be bound"
	
	bindings
		at: #ButtonAdapter				put: #ButtonAdapter;
		at: #CheckBoxAdapter			put: #CheckBoxAdapter;
		at: #ContainerAdapter			put: #ContainerAdapter;
		at: #DiffAdapter				put: #MorphicDiffAdapter;
		at: #ImageAdapter				put: #ImageAdapter;
		at: #LabelAdapter				put: #LabelAdapter;
		at: #ListAdapter				put: #ListAdapter;
		at: #IconListAdapter			put: #IconListAdapter;
		at: #DropListAdapter			put: #DropListAdapter;
		at: #MultiColumnListAdapter		put: #MultiColumnListAdapter;
		at: #MenuAdapter				put: #MenuAdapter;
		at: #MenuGroupAdapter			put: #MenuGroupAdapter;
		at: #MenuItemAdapter			put: #MenuItemAdapter;	
		at: #NewListAdapter				put: #NewListAdapter;
		at: #RadioButtonAdapter			put: #RadioButtonAdapter;
		at: #SliderAdapter				put: #SliderAdapter;
		at: #TabManagerAdapter			put: #TabManagerAdapter;
		at: #TabAdapter					put: #TabAdapter;
		at: #TextAdapter				put: #TextAdapter;
		at: #TextInputFieldAdapter		put: #TextInputFieldAdapter;
		at: #TreeAdapter				put: #TreeAdapter;
		at: #TreeColumnAdapter			put: #TreeColumnAdapter;
		at: #TreeNodeAdapter			put: #TreeNodeAdapter;		
		at: #WindowAdapter				put: #WindowAdapter;
		at: #DialogWindowAdapter		put: #DialogWindowAdapter;
		yourself
]]]

Each UI framework-specific adapter set should define its own bindings.
To implement a new binding, a subclass of ""SpecAdapterBindings"" must be defined that overrides the method ==initializeBindings==.
This method must bind ''Spec'' adapter names with framework specific adapter class names.
The example *@ex_morphic_bindings* shows how the morphic binding implements the method ==initializeBindings==.

[[[label=ex_morphic_bindings|caption=Definition of Morphic specific bindings|language=Smalltalk 
initializeBindings
	
	bindings
		at: #ButtonAdapter				put: #MorphicButtonAdapter;
		at: #CheckBoxAdapter			put: #MorphicCheckBoxAdapter;
		at: #ContainerAdapter			put: #MorphicContainerAdapter;
		at: #DiffAdapter				put: #MorphicDiffAdapter;
		at: #DropListAdapter			put: #MorphicDropListAdapter;
		at: #LabelAdapter				put: #MorphicLabelAdapter;
		at: #ListAdapter				put: #MorphicListAdapter;
		at: #IconListAdapter			put: #MorphicIconListAdapter;
		at: #ImageAdapter				put: #MorphicImageAdapter;
		at: #MultiColumnListAdapter		put: #MorphicMultiColumnListAdapter;
		at: #MenuAdapter				put: #MorphicMenuAdapter;
		at: #MenuGroupAdapter			put: #MorphicMenuGroupAdapter;
		at: #MenuItemAdapter			put: #MorphicMenuItemAdapter;
		at: #NewListAdapter				put: #MorphicNewListAdapter;
		at: #RadioButtonAdapter			put: #MorphicRadioButtonAdapter;
		at: #SliderAdapter				put: #MorphicSliderAdapter;
		at: #TabManagerAdapter			put: #MorphicTabManagerAdapter;
		at: #TabAdapter					put: #MorphicTabAdapter;
		at: #TextAdapter				put: #MorphicTextAdapter;
		at: #TextInputFieldAdapter		put: #MorphicTextInputFieldAdapter;
		at: #TreeAdapter				put: #MorphicTreeAdapter;
		at: #TreeColumnAdapter			put: #MorphicTreeColumnAdapter;
		at: #TreeNodeAdapter			put: #MorphicTreeNodeAdapter;
		at: #WindowAdapter				put: #MorphicWindowAdapter;
		at: #DialogWindowAdapter		put: #MorphicDialogWindowAdapter;
		yourself
]]]

Once this is done, the bindings should be re-initialized by running the following snippet of code: ==SpecInterpreter hardResetBindings==.

Then during the process of computing a ''Spec'' model and its layout into a framework specific UI element, the binding can be changed to change the output framework.
The binding is managed by the ""SpecInterpreter"".

The example *@ex_setting_bindings* shows how to do change the binding to use the ""MyOwnBindingClass"" class.

[[[label=ex_setting_bindings|caption=How to set custom bindings|language=Smalltalk 
SpecInterpreter bindings: MyOwnBindingClass new.
]]]

Note that the ""SpecInterpreter"" bindings are reset after each execution.
!! The Spec interpreter
@sec_spec_interpreter

In order to create a framework specific UI element a ''Spec'' model is interpreted via the ""SpecInterpreter"".
The interpreter is in charge of recursively interpreting all the sub widgets of a model.
It then combines them, according to the given layout and the given binding.

The interpreter entry point is the method ==SpecInterpreter>>interpretASpec:selector:==.

This section will explain the two main parts of the interpretation of a model: data collection and the interpretation loop.
In addition, the flow diagram *@fig_flow_diagram* outlines the different steps of the process and their relationships.

+Spec interpretation flow chart>file://figures/Interpretation_Chart.png|width=50|label=fig_flow_diagram+

!!! Collect the data

Before the interpretation loop itself, the interpreter starts by collecting the required data from the model.
The first element is the array to interpret.
The second is the spec wrapper used to encapsulate data during the interpretation.

The array to interpret is extracted from the layout provided by the model.
The code *@ex_extract_array* shows the conversion of a SpecLayout into an array of literals that the interpreter can iterate over.

[[[label=ex_extract_array|caption=Conversion of a SpecLayout into an Array of literals|language=Smalltalk 
SpecLayout composed
	newRow: [ :row | row add: #theList ];
	asArray
	 
"returns"	 

#(#ContainerModel 
	#add: #(
		#(#ContainerModel 
			#add: #(
				#(#model #theList) 
					#layout: #(
						#SpecLayoutFrame 
							#leftFraction: 0 
							#topFraction: 0 
							#rightFraction: 1 
							#bottomFraction: 1 
							#leftOffset: 0 
							#topOffset: 0 
							#rightOffset: 0 
							#bottomOffset: 0
					)
			)
		) #layout: #(
			#SpecLayoutFrame 
				#leftFraction: 0 
				#topFraction: 0 
				#rightFraction: 1 
				#bottomFraction: 1 
				#leftOffset: 0 
				#topOffset: 0 
				#rightOffset: 0 
				#bottomOffset: 0
		)
	)
)
]]]

During the recursive calls of the interpretation loop, the interpreter can be called with any kind of object.
So the first step is the extraction of the data to interpret, if any.
If there is no data to interpret, it means that the recursive calls reached a ''primitive object'' (like the integer in the example *@ex_extract_array*), i.e. an object which can not be interpreted.
In this case the primitive object is directly returned.

The second item to collect, if the first step succeeded, is the spec wrapper that will be used throughout the interpretation.
This step checks if the model provided as argument needs to be rebuild or not.
If not, the currently existing UI element is directly returned.
Otherwise this step results in the creation of a wrapper object that keeps the current model as well as the receiver of messages that will be performed in the interpretation loop.
The result of the interpretation is this wrapper object, and the type of the wrapper is determined by the first element of the array.
For example, the type of the wrapper that results from the interpretation of the example *@ex_extract_array* is determined by the very first ==#ContainerModel== element.

!!! Interpretation loop

Once all the required data is collected, the interpretation loop can begin.

The loop is quite simple. The first element of the array is popped out of the array to interpret.
This literal is the selector of the method that will be performed on the receiver that was previously stored inside the wrapper.
According to the selector, an adequate number of arguments are popped from the array to interpret.

Each argument is then interpreted using a new ""SpecInterpreter"" instance, following the exact same process.
This step is the step leading to recursive calls.

The selector is then performed on the current receiver and given as arguments the results of the argument interpretation.

The loop ends when the array is empty.
The resulting adapter is returned and linked to the model that was provided to the interpreter.
