{
	"metadata" : {
		"title" : "Tips and Tricks"
	}
}
@cha_tips_and_tricks

@@todo JF write some sections, check last section for more refs, do an editorial pass

This chapter collects many small examples of features that may be of
use when building user interfaces with Spec. For the sake of brevity,
many examples use dynamic Spec (see chapter XXX), but these
of course also work with normal Spec.


!! Scrollable List of Widgets

==ListModel== can show more than just text, it can also visualize any
kind of widgets. To do this, all that is needed is to set the
==displayBlock:== to display the widgets. This allows to create,
e.g. a scrollable list of buttons that reveal information about the classes in the ''Files'' package:

[[[
ListModel new
	items:
		('Files' asPackage classes
			collect: [ :class |
				ButtonModel new
					icon: class systemIcon;
					label: class name;
					action: [ UIManager default alert: class comment title: class name ] ]);
	displayBlock: [ :x | x buildWithSpec ];
	openWithSpec
]]]

+The Scrollable List of Widgets>file://figures/scrollable_buttons.png|width=30|label=fig_scrollable_buttons+

!! Include a Morph in a Spec UI

Any morph can be included as a widget in a Spec UI. To do this, send
the Morph instance the ==asSpecAdapter== message, it will return a
Spec widget that can be used in your UI.

As an example, we open the ==CalendarMorph== as a Spec widget.

[[[
|container|
container := DynamicComposableModel new.
container assign: (CalendarMorph openOn: Date today) asSpecAdapter to: #cal.
container layout:
			(SpecLayout composed add: #cal; yourself).
container openWithSpec.
]]]

@@note This code does not work yet due to issues with ==DynamicComposableModel== and the ==MorphicGenericAdapter==.

!! Include a Glamour UI in a Spec Window

@@todo JF WRITE ME: Infinite recursion between Spec and Glamour Inspector needs to be shown.

!! Testing the Functionality of a Spec UI

@@todo JF WRITE ME

This code literally runs the tests sequences over the calculator GUI’s key buttons and checks the result in the display input field — pretty cool, no ?

[[[
setUp
  calculator := HP35CalculatorUIModel new.
  calculator openWithSpec

tearDown
  calculator window close

runSequence: script
  script pairsDo: [ :key :result |
    (calculator perform: key) performAction.
    self
      assert: calculator display text
      equals: result asString asUppercase ]
]]]

!! Customize the Appearance of a Widget

If Spec does not allow you to customize the appearance of a widget,
but the underlying widget library does, you can send messages to the
widget just after it has been built. For this, configure the widget
with the ==whenBuiltDo:== message. The argument is a block that takes
1 argument, this will be an instance of a ==WidgetBuilt== announcement.

For example, assuming the label below is a Morphic label, it will be
rendered in red, and use the Balloon font in Italic.

[[[
		 |container|
		 container := DynamicComposableModel new.
		 container instantiateModels:  #(#red LabelModel).
		 container red label: 'I am red'.
		container red whenBuiltDo: [:ann|
				  ann widget color: (Color red);
				  	  font: BalloonMorph balloonFont emphasis: 2].
		 container layout:
		 		   	(SpecLayout composed add: #red; yourself).
		container openWithSpec
]]]

@@note Warning: By doing the above you are tightly coupling your UI to the underlying widget library. As a result, your UI may break if there are changes in this library, or if Spec uses another library for its underlying widgets.

!! Show a Table-Like View

There are multiple ways in which a table-like widget can be shown to the user. The most straightforward way is the ==MultiColumnListModel==, for example as below:

[[[
MultiColumnListModel new
	items: #(
		('Origin' 'Destination' 'Start Time' 'Stop Time')
		('Santiago' 'Paris' '15:30' '11:15')
		('Paris' 'Santiago' '23:30' '8:00')
		);
	displayBlock: [ :x | x collect: #asString ];
	openWithSpec.
]]]

Alternatively, a ==TreeModel== can be used, which allows for more fancy formatting options. (This example thanks to Nicolai Hess)

[[[
|r m col1 col2 col3|
r := FileLocator vmDirectory.
    m := TreeModel new.
    m roots: r allFiles.
    m rootNodeHolder: [ :item |
        TreeNodeModel new
            content: item;
            icon: Smalltalk ui icons smallLeftFlushIcon
    ];
    title: r fullName.
    col1 := TreeColumnModel new
        displayBlock: [ :node | node content basename ];
        headerLabel:'Name'.
    col2 := TreeColumnModel new
        displayBlock: [ :node | node content creationTime ];
        headerLabel:'Time'.
    col3 := TreeColumnModel new
        displayBlock: [ :node | node content permissions];
        headerLabel:'Permissions'.
    m columns: {col1. col2 . col3}.
    m openWithSpec.
]]]

!! Non-Editable Multi-Line Text

The ==TextInputFieldModel== can be configured such that the text it contains is not editable, by disabling it:

[[[
TextInputFieldModel new
	text: ('qwerty\asdfgh\zxcvbn' withCRs );
	enabled: false;
	openWithSpec
]]]

!! List items do not update

Adding items to a collection held in a list does not update the widget. To do that, you need to set the items of the list, using the ==items:== message. This is required because it also sorts the list items (if required)

[[[
|container count|
		count :=0.
		container := DynamicComposableModel new.
		container instantiateModels:  #(#list ListModel #plus ButtonModel).
		container plus label: '+1'.
		container plus action: [ | items |
			count := count + 1.
			items := container list getList asOrderedCollection.
			items add: count asString.
			container list items: items ].
		container layout:
		 		   	(SpecRowLayout composed
						add: #list ; add: #plus ; yourself).
		container openWithSpec
]]]

!! The Focusorder
@sec_focusorder

==ComposableModel== provides a variable '''focusOrder''' and its accessors to managed the path followed by the focus. If it lets nil the default Object is set.

[[[label=ex_focusOrder_acessor|caption=The getter ComposableModel focusOrder|language=Smalltalk
ComposableModel>>focusOrder
	^ focusOrder ifNil: [ focusOrder := SpecFocusOrder new ]
]]]

SpecFocusOrder manages models in an OrderedCollection (presenters) and provides a getter for it and some methods like:
- ==add:== to add a model in its collection
- ==giveFocusToNextFrom:for:== to transfert the focus at the next model



@@todo check if for: aModel is mandatory

[[[label=ex_focusOrder_giveFocusToNextFrom|caption=The method SpecFocusOrder giveFocusToNextFrom|language=Smalltalk
SpecFocusOrder>>giveFocusToNextFrom: aPresenter for: aModel
	| focus |
	focus := self presenters.
	(focus includes: aPresenter)
		ifTrue: [ | index next |
			index := (focus indexOf: aPresenter) + 1.
			index <= focus size
				ifTrue: [ next := focus at: index.
					next takeKeyboardFocus.
					^ true ] ].
	^ aModel owner
		ifNil: [ | next |
			next := focus at: 1 ifAbsent: [ ^ false ].
			next takeKeyboardFocus.
			true ]
		ifNotNil: [ aModel owner giveFocusToNextFrom: aModel.
			true ]
]]]

That method looks for the next model to give the focus through these steps:
- It looks in its collection for the index of the object (aPresenter) currently having the focus. If it finds it, it increments the index by one.
- If it does not find it or if the new index is out of its collection bounds, it tries to give the focus to the next parent in the subwidgets' hierarchy (using aModel).
- If there is no parent, it loops at the beginning of its collection to give the focus at its first model)






!! Found more Examples

- Package Spec-BuildUIWithSpec
- Package Spec-Examples
- Package Spec-PolyWidgets
- StephanEggermont's repot (Ancestry and SpecGenerator)
- ==AbstractWidgetModel== subclasses sometimes provide examples in their class side, the most part of them are in the package Spec-core in the protocol Widget

@@todo fill locations of others examples / revisit it
