! Tips and Tricks

This chapter will present some little examples that may help you for building interfaces with Spec. 

!! Non-editable text field

To create a non-editable text field you need to use ==TextInputFieldModel== and use ==#enabled:== as in the following code snippet *ex_noneditable_textfield* :

[[[label=ex_non_editable_textfield|caption=Non-Editable Textfield|language=Smalltalk|
	| inputField |
	inputField := TextInputFieldModel new.
	inputField
		enabled: false;
		text: 'Hello Spec !'.
	inputField openWithSpec
]]]

+The non-editable text field>file://figures/noneditable_textfield.png|width=30|label=fig_noneditable_textfield+


!! Nested focus order

Spec is made for composing and reusing widgets. When it is needed to create a new widget with two subwidget that are also composed of subwidgets there is a little trick to set up the focus correctly.

For this tip, we are going to implement three widgets : two simple subwidgets and the composed widget which must manage correctly the focus order.

First, create a widget ==TwoButtons== to hold two ==ButtonModel== and add the buttons to the focus order in ==#initializeWidgets== message.

Then, create the second widget ==AList== to hold a ==ListModel==, add the list to the focus order in ==#initializeWidgets==.

Finally, create the widget ==SuperWidget== to hold the two precedent widgets.

Here is where the trick is made. To compose the focus correctly, you must add ==AList== to the focus order of ==TwoButtons== and add ==TwoButtons== to the focus order of ==AList== to ensure that the focus is managed correctly in ==SuperWidget==.

[[[label=ex_composed_focus_order|caption=initializeWidgets to manage the focus order|language=Smalltalk|
SuperWidget>>initializeWidgets

    twoButtons := TwoButtons new.
    aList := AList new.
        
    twoButtons focusOrder add: aList.
    aList focusOrder add: twoButtons
]]]

+The SuperWidget>file://figures/SuperWidget_focusorder.png|width=50|label=fig_superwidget_focusorder+

