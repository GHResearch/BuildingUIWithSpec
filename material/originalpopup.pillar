!!!! Designing a pop up

@@todo is it here for real? may be should be move to basic examples and here we keep the explanation for the dynamic part.

This example shows how to easily and quickly design a popup window asking for an input.

First we create a simple model with two sub widgets, a label and a text field, as shown by the snippet *@ex_widget_creation*.

[[[label=ex_widget_creation|caption=Create a widget|language=Smalltalk 
view := DynamicComposableModel new
	instantiateModels: #(label LabelModel text TextInputFieldModel);
	yourself.
]]]

We can then specify the title and the initial size of the widget, adding the code in *@ex_set_title*.

[[[label=ex_set_title|caption=Specify the title and the initial size|language=Smalltalk 
view extent: 300@90;
	title: 'Choose your project'.
]]]

Then we specify the UI element layout.
It will be only one row with the label and the text field.
The snippet *@ex_layout* shows the layout definition.

[[[label=ex_layout|caption=Define the layout|language=Smalltalk 
layout := SpecLayout composed
	newRow: [ :r | r add: #label width: 75; add: #text ];
	yourself.
]]]

To have a first idea of the resulting UI, we can already open it as follows: ==view openWithSpecLayout: layout==.
This UI however does not have any sub widget state or behavior so there is not much to see or do at this point.

The next step is to set up the sub widget state and behavior.
We set the text of the label as well as the ghost text of the textfield.
We also specify here that the text field should automatically accept the text on each keystroke, such that it does not show the yellow 'edited' triangle on the top right.
This is shown in the code in *@ex_setup_subwidget*.

[[[label=ex_setup_subwidget|caption=Setting up the sub widgets|language=Smalltalk 
view label text: 'Packages:'.

view text
	autoAccept: true;
	entryCompletion: nil;
	ghostText: '.*'.
]]]

Opening the UI again (==view openWithSpecLayout: layout==) now shows the text of the label and the ghost text of the text field.


As we want the widget to be a popup with a single button ''Ok'', the toolbar to use should be defined explicitly (the default toolbar has an ''Ok'' button and a ''Cancel'' button).
We also set the toolbar action for when ''Ok'' is clicked: the current text of the text field will be saved in the instance variable ''regex''.
The code in *@ex_toolbar* shows how to do it.


[[[label=ex_toolbar|caption=Instantiating the toolbar|language=Smalltalk 
toolbar := OkToolbar new
	okAction: [ regex := view text text ];
	yourself.
]]]

We can also add a shortcut to the text field on ''Enter'' to simulate the click on ''Ok''.
The code *@ex_shortcut* illustrates how to set up such a shortcut.

[[[label=ex_shortcut|caption=Add a shortcut|language=Smalltalk 
view text 
	bindKeyCombination: Character cr asKeyCombination 
	toAction: [ toolbar triggerOkAction ].
]]]

This completes the specification of the UI.
As a final step, when opening it we pass it the toolbar and configure it to be centered in the Pharo window and modal.
The code in *@ex_final* shows the final version of the code

[[[label=ex_final|caption=Open the widget|language=Smalltalk 
view := DynamicComposableModel new
	instantiateModels: #(label LabelModel text TextInputFieldModel);
	extent: 300@90;
	title: 'Choose your project'
	yourself.
	
view label text: 'Packages:'.

layout := SpecLayout composed
	newRow: [ :r | r add: #label width: 75; add: #text ];
	yourself.

view text
	autoAccept: true;
	entryCompletion: nil;
	ghostText: '.*'.
	
toolbar := OkToolbar new
	okAction: [ regex := view text text ];
	yourself.
	
view text 
	bindKeyCombination: Character cr asKeyCombination 
	toAction: [ toolbar triggerOkAction ].
	
(view openDialogWithSpecLayout: layout)
	toolbar: toolbar;
	centered;
	modalRelativeTo: World.
]]]
